"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Intro to lo-fi","href":"/docs/intro","docId":"intro"},{"type":"category","label":"Storing & Querying","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Creating a schema","href":"/docs/local-storage/schema","docId":"local-storage/schema"},{"type":"link","label":"Generating the client code","href":"/docs/local-storage/generate-client","docId":"local-storage/generate-client"},{"type":"link","label":"Migrations","href":"/docs/local-storage/migrations","docId":"local-storage/migrations"},{"type":"link","label":"Indexes & Querying","href":"/docs/local-storage/querying","docId":"local-storage/querying"},{"type":"link","label":"Documents & Entities","href":"/docs/local-storage/entities","docId":"local-storage/entities"}],"href":"/docs/category/storing--querying"},{"type":"category","label":"Sync","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Sync Server","href":"/docs/sync/server","docId":"sync/server"},{"type":"link","label":"Authorizing Sync","href":"/docs/sync/authorization","docId":"sync/authorization"},{"type":"link","label":"Connecting a Client","href":"/docs/sync/client","docId":"sync/client"},{"type":"link","label":"Presence & Profiles","href":"/docs/sync/presence","docId":"sync/presence"},{"type":"link","label":"Advanced: Transports","href":"/docs/sync/transports","docId":"sync/transports"}],"href":"/docs/category/sync"},{"type":"link","label":"React","href":"/docs/react","docId":"react"}]},"docs":{"intro":{"id":"intro","title":"Intro to lo-fi","description":"An IndexedDB-powered database and data sync solution for lightweight, local-first web apps.","sidebar":"tutorialSidebar"},"local-storage/entities":{"id":"local-storage/entities","title":"Documents & Entities","description":"Queries return Documents. A Document provides a .get method to retrieve properties, and a .set to set them - as well as other utility methods depending on its type. All root documents are Object Entities, which also provide .update. Since Documents can contain arbitrary sub-objects, you can retrieve lists off them, which comes as List Entities and provide some common list methods too.","sidebar":"tutorialSidebar"},"local-storage/generate-client":{"id":"local-storage/generate-client","title":"Generating the client code","description":"Using your schema, you can generate your typed client code using lo-fi\'s CLI.","sidebar":"tutorialSidebar"},"local-storage/migrations":{"id":"local-storage/migrations","title":"Migrations","description":"Every schema change requires a migration, including the initial one. While CLI migration management is not yet completed, I recommend creating a migrations directory in your generated client directory and adding the initial migration for your schema manually in a file v1.ts:","sidebar":"tutorialSidebar"},"local-storage/querying":{"id":"local-storage/querying","title":"Indexes & Querying","description":"By default you can retrieve lists of all documents in a collection, or just one by its primary key.","sidebar":"tutorialSidebar"},"local-storage/schema":{"id":"local-storage/schema","title":"Creating a schema","description":"The first step client-side is to define a schema of what kind of documents you are working with. A schema looks like this:","sidebar":"tutorialSidebar"},"react":{"id":"react","title":"React","description":"lo-fi has React hooks generation. To enable it, pass --react to the CLI. A new module react.js will be emitted in the output directory. It exports one function, createHooks. Pass your ClientDescriptor instance into that.","sidebar":"tutorialSidebar"},"sync/authorization":{"id":"sync/authorization","title":"Authorizing Sync","description":"To connect to sync, you must create an auth endpoint. This can be done automatically on the same server you use for sync, or you can define a custom endpoint on a different server.","sidebar":"tutorialSidebar"},"sync/client":{"id":"sync/client","title":"Connecting a Client","description":"To connect your client to the server, you must pass it sync configuration.","sidebar":"tutorialSidebar"},"sync/presence":{"id":"sync/presence","title":"Presence & Profiles","description":"Once you\'re syncing, presence info is available on client.sync.presence (where client is your instance of Client).","sidebar":"tutorialSidebar"},"sync/server":{"id":"sync/server","title":"Sync Server","description":"lo-fi doesn\'t sync by default. It\'s offline-first, sync-optional. I built it that way because my goal is to support nice local-only anonymous experiences, and add sync & realtime on as an incentive to sign up (and potentially subscribe) to your app.","sidebar":"tutorialSidebar"},"sync/transports":{"id":"sync/transports","title":"Advanced: Transports","description":"lo-fi can sync over HTTP requests or WebSockets. By default, it automatically uses HTTP when a user is the only one connected to a library, and switches to WebSockets when other users are online.","sidebar":"tutorialSidebar"}}}')}}]);