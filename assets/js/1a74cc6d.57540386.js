"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5086],{4852:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(9231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,y=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3478:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7626),o=(n(9231),n(4852));const a={sidebar_position:1},i="Sync Server",s={unversionedId:"sync/server",id:"sync/server",title:"Sync Server",description:"lo-fi doesn't sync by default. It's offline-first, sync-optional. I built it that way because my goal is to support nice local-only anonymous experiences, and add sync & realtime on as an incentive to sign up (and potentially subscribe) to your app.",source:"@site/docs/sync/server.md",sourceDirName:"sync",slug:"/sync/server",permalink:"/docs/sync/server",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sync/server.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Sync",permalink:"/docs/category/sync"},next:{title:"Authorizing Sync",permalink:"/docs/sync/authorization"}},l={},c=[{value:"Profiles",id:"profiles",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sync-server"},"Sync Server"),(0,o.kt)("p",null,"lo-fi doesn't sync by default. It's offline-first, sync-optional. I built it that way because my goal is to support nice local-only anonymous experiences, and add sync & realtime on as an incentive to sign up (and potentially subscribe) to your app."),(0,o.kt)("p",null,"To start syncing, you must first host a server - just a few lines of code."),(0,o.kt)("p",null,"The server can be run standalone, or plugged into an existing HTTP server. It requires a few things to be constructed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A path to a SQLite database to store data"),(0,o.kt)("li",{parentName:"ul"},"An authorization function which it uses to determine connected client identity and library access"),(0,o.kt)("li",{parentName:"ul"},"Optional: an interface implementation to provide more detailed user profile information for presence features")),(0,o.kt)("p",null,"Create a server like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Server } from '@lo-fi/server';\n\nconst server = new Server({\n    databaseFile: 'path/to/db.sqlite',\n    tokenSecret: process.env.LOFI_SECRET,\n    // below fields are optional\n    profiles: {\n        get: async (userId: string) => {\n            // you could fetch a profile record from a database here to augment\n            // this profile with name, image, etc.\n            // values will be cached, so don't worry too much about timing.\n            return { id: userId };\n        },\n    },\n    // supposing you're using Express or another server already,\n    // you can attach lo-fi to it instead of running it separately.\n    httpServer: myExistingServer,\n});\n\n// if you did not provide your own http server, call listen to begin\n// serving requests\nserver.listen(8080, () => {\n    console.log('Ready!');\n});\n")),(0,o.kt)("p",null,"If you want to attach to an existing HTTP server, you will also need to set up an HTTP endpoint to handle HTTP requests on the ",(0,o.kt)("inlineCode",{parentName:"p"},"/lofi")," subpath. For example, using Express:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"app.use('/lofi', server.handleRequest);\n")),(0,o.kt)("p",null,"Custom HTTP server support is a little limited right now. It should support Connect/Express-like middleware."),(0,o.kt)("h2",{id:"profiles"},"Profiles"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"profiles")," configuration option accepts anything that implements the profiles interface - which is just a ",(0,o.kt)("inlineCode",{parentName:"p"},"get(userId)")," function. It can return any data your app permanently associates with a particular user. This data is utilized in the ",(0,o.kt)("a",{parentName:"p",href:"./presence"},"presence")," system to give clients access to read-only, trusted information about particular users. A default name is recommended if you have one for your user. A profile image is also a good idea!"))}p.isMDXComponent=!0}}]);